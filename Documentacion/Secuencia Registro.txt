title Registro de Usuario (SignIn) - Flujo Completo con React Hooks
title Registro de Usuario (SignIn) - Flujo Completo con React Hooks

actor Usuario

participant MenuLogin
participant ViewRenderer
participant SignIn
participant useSignIn
participant React
participant Firebase Auth
participant Firestore
participant App

Usuario->MenuLogin:Click "Crear Cuenta"
MenuLogin->ViewRenderer:setCurrentView("signIn")
ViewRenderer->SignIn:<SignIn \n  setCurrentView={setCurrentView}\n  error={error}\n  setError={setError} />

SignIn->useSignIn:useSignIn(setCurrentView, setError)

note over useSignIn: Inicialización de estados con React 

useSignIn->React:useState({\n  email: "",\n  password: "",\n  confirmPassword: ""\n})
React-->useSignIn:[formData, setFormData]

useSignIn->React:useState(false)
React-->useSignIn:[loading, setLoading]

SignIn<--useSignIn:{\n  formData,\n  updateField,\n  handleRegister,\n  handleKeyPress,\n  loading\n}

SignIn->React:Renderiza JSX
React-->Usuario:Muestra formulario con:\n- Logo "ControlFit"\n- Campos de entrada\n- PasswordRequirements component

Usuario->SignIn:Ingresa email "user@example.com"
SignIn->useSignIn:updateField("email", "user@example.com")
useSignIn->useSignIn:setFormData(prev => ({...prev, email: value}))
useSignIn->React:Actualiza estado formData
React->SignIn:Re-render con nuevo email

Usuario->SignIn:Ingresa contraseña "Pass123"
SignIn->useSignIn:updateField("password", "Pass123")
useSignIn->useSignIn:setFormData(prev => ({...prev, password: value}))
useSignIn->React:Actualiza estado formData
React->SignIn:Re-render con nueva contraseña
SignIn->SignIn:<PasswordRequirements password="Pass123" />
SignIn-->Usuario:Muestra requisitos:\n✓ Al menos 6 caracteres\n✓ Una mayúscula\n✓ Una minúscula

Usuario->SignIn:Ingresa confirmación "Pass123"
SignIn->useSignIn:updateField("confirmPassword", "Pass123")
useSignIn->useSignIn:setFormData(prev => ({...prev, confirmPassword: value}))
useSignIn->React:Actualiza estado formData
React->SignIn:Re-render con confirmación
SignIn-->Usuario:✓ Las contraseñas coinciden

Usuario->SignIn:Click "Registrarse" o presiona Enter
SignIn->useSignIn:handleRegister()

useSignIn->useSignIn:validateForm()
note right of useSignIn: Validaciones:\n1. Campos no vacíos\n2. Email válido (@)\n3. Contraseña >= 6 chars\n4. Contraseñas coinciden\n5. Mayúscula y minúscula

alt Validación exitosa
    useSignIn->useSignIn:setLoading(true)
    useSignIn->React:Actualiza estado loading
    React->SignIn:Re-render
    
    useSignIn->useSignIn:setError(null)
    useSignIn->React:Actualiza estado error en App
    
    SignIn-->Usuario:Botón muestra "Creando cuenta..."\ny se deshabilita
    
    useSignIn->Firebase Auth:createUserWithEmailAndPassword(\n  auth,\n  "user@example.com",\n  "Pass123"\n)
    
    alt Registro exitoso
        Firebase Auth-->useSignIn:userCredential {\n  user: {\n    uid: "abc123",\n    email: "user@example.com"\n  }\n}
        
        useSignIn->Firestore:setDoc(\n  doc(db, "usuarios", "abc123"),\n  {\n    email: "user@example.com",\n    datosCompletos: false,\n    fechaRegistro: "2024-01-20T10:30:00Z"\n  }\n)
        Firestore-->useSignIn:success
        
        useSignIn->ViewRenderer:setCurrentView("formularioDatos")
        
        note over App: App.js detecta cambio de auth\nvia onAuthStateChanged (useEffect)
        App<--Firebase Auth:user authenticated
        App->React:useState actualiza currentUser
        App->App:handleAuthStateChange(user)
        App->ViewRenderer:setCurrentView("formularioDatos")
        ViewRenderer->React:Unmount SignIn component
        ViewRenderer->React:Mount FormularioDatos
        React-->Usuario:Muestra FormularioDatos
        
    else Error de Firebase
        Firebase Auth-->useSignIn:FirebaseError {\n  code: "auth/email-already-in-use"\n}
        
        useSignIn->useSignIn:const message = errorMessages[error.code]
        note right of useSignIn: Mensajes de error:\n- auth/email-already-in-use\n- auth/invalid-email\n- auth/weak-password\n- auth/network-request-failed
        
        useSignIn->useSignIn:setError("Ya existe una cuenta con este correo")
        useSignIn->React:Actualiza estado error
        React->SignIn:Re-render con error
        SignIn-->Usuario:Muestra error con botón ✕
    end
    
    useSignIn->useSignIn:setLoading(false)
    useSignIn->React:Actualiza estado loading
    React->SignIn:Re-render
    
else Validación fallida
    useSignIn->useSignIn:setError(mensajeError)
    useSignIn->React:Actualiza estado error
    React->SignIn:Re-render con error
    note right of useSignIn: Posibles errores:\n- "Todos los campos son requeridos"\n- "Ingresa un correo válido"\n- "Contraseña debe tener 6+ chars"\n- "Las contraseñas no coinciden"\n- "Debe tener mayúscula y minúscula"
    SignIn-->Usuario:Muestra mensaje de error
end

alt Usuario cierra error
    Usuario->SignIn:Click ✕ en mensaje error
    SignIn->SignIn:setError(null)
    SignIn->React:Actualiza estado error
    React->SignIn:Re-render sin error
    SignIn-->Usuario:Oculta mensaje error
end

alt Navegación alternativa
    opt Usuario ya tiene cuenta
        Usuario->SignIn:Click "Ya tengo cuenta"
        SignIn->ViewRenderer:setCurrentView("login")
        ViewRenderer->React:Unmount SignIn
        ViewRenderer->React:Mount Login
        React-->Usuario:Muestra Login
    end
    
    opt Usuario cancela
        Usuario->SignIn:Click "← Volver al menú"
        SignIn->ViewRenderer:setCurrentView("menu")
        ViewRenderer->React:Unmount SignIn
        ViewRenderer->React:Mount MenuLogin
        React-->Usuario:Muestra MenuLogin
    end
end

note over React: Estados manejados:\n- formData (en useSignIn)\n- loading (en useSignIn)\n- error (en App via props)\n- currentView (en App)\n- currentUser (en App)

note over SignIn: Estados del botón Registrarse:\n- Deshabilitado si loading=true\n- Deshabilitado si !isPasswordMatch\n- Texto cambia según loading cambia según loading